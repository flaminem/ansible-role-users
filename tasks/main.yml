---
- name: Per-user group creation
  group: >
    name="{{item.username}}" 
    gid="{{item.uid}}"
  with_items: users
  when: item.group is undefined
  tags: ['users','configuration']

- name: Groups creation
  group: >
    name="{{item.name}}" 
    gid="{{item.gid}}"
    state="present"
  with_items: users_groups
  tags: ['users','configuration']

- name: User creation
  user: >
        name="{{item.username}}"
        group="{{item.group| default(item.username if users_create_per_user_group else users_group)}}"
        groups="{{item.groups | join(',')}}"
        append="{{users_append_groups}}"
        shell={{item.shell if item.shell is defined else users_default_shell}}
        comment="{{item.name | default(item.username)}}"
        uid="{{item.uid}}"
        createhome="{{'yes' if users_create_homedirs else 'no'}}"
  with_items: users
  tags: ['users','configuration']

- name: SSH keys
  authorized_key: >
    user="{{item.0.username}}" 
    key="{{item.1}}"
  with_subelements:
    - users
    - ssh_key
  tags: ['users','configuration', 'acl']

- name: Remove revoked SSH keys
  authorized_key: >
    user="{{item.0.username}}" 
    key="{{item.1}}"
    state="absent"
  with_nested:
    - users
    - users_revoked_ssh_key
  tags: ['users','configuration']

- name: Deleted user removal
  user: >
    name="{{item.username}}" 
    state=absent
  with_items: users_deleted
  tags: ['users','configuration']

- name: Deleted per-user group removal
  group: >
    name="{{item.username}}" 
    state=absent
  with_items: users_deleted
  when: users_create_per_user_group
  tags: ['users','configuration']

- name: Generate root random password
  user: >
        name=root
        uid=0
        password="{{ lookup('password', users_root_password_file+' chars='+users_root_password_chars+' encrypt='+users_root_password_encrypt+' length='+users_root_password_length) }}"
  when: users_root_random_password
  tags: ['users','configuration']

- name: Look for any skeleton files
  command: echo {{item}}
  with_fileglob: users_skeleton_path
  register: users_skeleton_files
  when: users_skeleton_path is defined and users_create_homedirs
  tags: ['users','configuration', 'skeleton']

- name: Ensure skeleton is installed
  copy: src={{item.1.item}}
        dest=/home/{{item.0.username}}/.
        owner={{item.0.username}}
        group={{item.0.username}}
        mode=0600
  with_nested: 
    - users
    - users_skeleton_files.results
  when: users_skeleton_files is defined and not (users_skeleton_files | skipped)
  tags: ['users','configuration', 'skeleton']


